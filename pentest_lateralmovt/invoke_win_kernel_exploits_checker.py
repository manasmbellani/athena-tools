#!/usr/bin/env python3
# 
# This script checks the output of command 'systeminfo' run on Windows sevice
# determines if there are any exploits applicable for this device, by also 
# taking into account the excluded KBs
# 

import argparse
import json
import os
import re
import sys


DESCRIPTION = """
Description
-----------
This script will check the output of command `systeminfo` run on Windows device, &
determine if there are any exploits applicable for this device, while looking at 
KBs which are excluded.
"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument("-si", "--systeminfo-input-file", required=True,
                        help="String/File with `systeminfo` input")
    parser.add_argument("-pl", "--patches-list-file", required=True,
        help=("Patch list file obtained via `WMIC QFE` command. If full list "
              "of KBs present in 'systeminfo' file, then the same `systeminfo` "
              "file can also be provided."))
    parser.add_argument("-oef", "--os-exploits-file", 
                        default="win_kernel_exploits.json",
                        help="File list of valid OS & exploits for Windows")
    params = parser.parse_args()
    
    print("[*] Checking if os_exploits_file exists.")
    if not os.path.isfile(params.os_exploits_file):
        print("[-] File: {} not found.".format(params.os_exploits_file))
        sys.exit(1)

    print("[*] Reading JSON os_exploits_file.")
    with open(params.os_exploits_file, "r+") as f:
        os_exploits_json = json.load(f)

    print("[*] Checking if systeminfo input file exists.")
    if not os.path.isfile(params.systeminfo_input_file):
        print("[-] Systeminfo input file: {} not found.".format(params.systeminfo_input_file))
        sys.exit(1)

    print("[*] Reading systeminfo input from user.")
    with open(params.systeminfo_input_file, "r+") as f:
        systeminfo_input = f.read()

    print("[*] Checking if patches list is provided.")
    if not os.path.isfile(params.patches_list_file):
        print("[-] Patches list file: {} not found".format(params.patcheslist_file))
        sys.exit(1)

    print("[*] Reading the list of all the patches.")
    with open(params.patches_list_file, "r+") as f:
        patches_list_input = f.read()

    print("[*] Getting the list of all the installed patches (without KB prefix).")
    patches_regex = "KB(?P<kb_no>[0-9]+)"
    installed_patches_str_list = re.findall(patches_regex, patches_list_input, re.I)
    installed_patches_int_list = [int(installed_patch) for installed_patch in installed_patches_str_list]

    print("[*] Extracting the os type from `systeminfo` input.")
    reg = "OS[ ]{0,3}Name:(?P<raw_os_name>.*)"
    m = re.search(reg, systeminfo_input, re.I)
    if m:
        raw_os_name = m.group('raw_os_name').strip()
        print("[+] raw_os_name: {}".format(raw_os_name))
    else:
        print("[-] os_name could not be obtained from `systeminfo` output.")
        sys.exit(1)

    print("[*] Reading all the OS regexes from the os_exploits_file.")
    os_list = os_exploits_json.get('os', None)
    if not os_list:
        print("[-] No 'os' list prvided")
        sys.exit(1)

    print("[*] Parsing each regex to determine OS type.")
    discovered_os = ""
    for os, os_regex in os_list.items():
        
        print("[*] Checking regex for OS: {}".format(os))
        m = re.search(os_regex, raw_os_name, re.I)
        if m:
            print("[+] Found os: {} with regex: {}".format(os, os_regex))
            discovered_os = os
    
    print("[*] Extracting the exploits list from the os_exploits_file.")
    exploits_dict = os_exploits_json.get('exploits', [])

    print("[*] Checking each exploit in the exploits list.")
    for exploit_id, exploit_info in exploits_dict.items():

        # Print exploit title
        exploit_title = exploit_info.get('title', '')
        if exploit_title:
            print("[+] Testing Exploit: {}".format(exploit_title))

        # Get affected OS list
        affected_os_list = exploit_info.get('os', [])
        if not affected_os_list:
            print("[-] Did not find OS for exploit: {}.".format(exploit_id))

        else:
            
            # Check if OS discovered in affected OSs
            if discovered_os not in affected_os_list:
                print("[*] OS: {} not affected by exploit: {}.".format(discovered_os, 
                    exploit_id))

            else:
                
                # Found OS in the list, but is it patched? Check each possible applicable patch for the exploit 
                exploit_patches = affected_os_list[discovered_os].get('fixes', 
                                  affected_os_list[discovered_os].get('exploit_patches', 
                                  affected_os_list[discovered_os].get('patches', [])))
                
                # looking for exploit patch numbers in the patch list
                if any([int(exploit_patch) in installed_patches_int_list for exploit_patch in exploit_patches]):
                    print("[*] OS: {} not affected by exploit: {}.".format(discovered_os, 
                        exploit_id))
                else:
                    print("[+] OS: {} vulnerable to exploit: {}.".format(discovered_os, 
                        exploit_id))


