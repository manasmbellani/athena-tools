#!/bin/bash
#
# Script determines the HTTP paths for a given URL list using a variety of tools
# 
# Uses 'anew' to add new things to the output file itself which can be downloaded
# via `go get -u github.com/tomnomnom/anew`
#

# User agent string
USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"

if [ $# -lt 1 ]; then
    echo "[-] cat ...<target|port|proto>... | $0 run \
[method=hakrawler|dirsearch|gobuster|all] \
[recursive=1] [custom-wordlist-for-gobuster=''] \
[outfile-web-paths-prefix=out-webpaths]"
    exit 1
fi
method=${2:-"all"}
recursions=${3:-"1"}
custom_wordlist=${4:-""}
verbose=${5:-"0"}
outfile_web_paths_prefix=${6:-"out-webpaths"}

# Get list of target/port/protocol from user
combos=$(cat -)

# Script directory
script_dir=$(dirname "$0")

# Loop through each combination and identify all SSH hosts
IFS=$'\n'
for combo in $combos; do

    if [ ! -z "$combo" ]; then

        # Prepare the output file for this target/port
        outfile=$(echo "$combo" | \
            $script_dir/invoke_cmd_on_target.sh "echo $outfile_web_paths_prefix-TARGET-PORT.txt")

        # Clear outfile if it already exists
        [ -f "$outfile" ] && rm "$outfile"

        # Add a line 
        echo "$combo" | 
            $script_dir/invoke_cmd_on_target.sh "echo PROTOCOL://TARGET:PORT > $outfile"
        
        # Initialise directory paths to check
        dir_paths=$(echo "$combo" | \
            $script_dir/invoke_cmd_on_target.sh "echo PROTOCOL://TARGET:PORT")

        for recurse_index in $(seq 1 $recursions); do
            IFS=$'\n'
            for dir_path in $dir_paths; do
                if [ "$method" == "hakrawler" ] || [ "$method" == "all" ]; then

                    if [ "$verbose" == "1" ]; then
                        echo "[*] Enumerate URL dir: $dir_path via hakrawler"
                    fi

                    protocol_target_dir=$(echo "$dir_path" | \
                        $script_dir/get_url_parts.sh 'protocol_target_dir')

                    # Run dirsearch, and also extract the results to the out file
                    cmd_to_invoke="hakrawler -url $protocol_target_dir -depth 1 -nocolor -all | grep -v subdomain > /tmp/out-hakrawler-TARGET-PORT-raw.txt;\
cat /tmp/out-hakrawler-TARGET-PORT-raw.txt | cut -d' ' -f2 > /tmp/out-hakrawler-TARGET-PORT.txt; \
cat /tmp/out-hakrawler-TARGET-PORT.txt | ~/go/bin/anew $outfile; \
rm /tmp/out-hakrawler-TARGET-PORT.txt /tmp/out-hakrawler-TARGET-PORT-raw.txt;"
                    echo "$combo" | \
                        $script_dir/invoke_cmd_on_target.sh "$cmd_to_invoke" "NONE" "1"
                fi

                if [ "$method" == "gobuster" ] || [ "$method" == "all" ]; then

                    # Get the custom wordlist
                    if [ -z "$custom_wordlist" ]; then
                        echo "[-] Gobuster requires wordlist to run" 1>&2
                    else
                        if [ "$verbose" == "1" ]; then
                            echo "[*] Enumerating URL dir: $dir_path via gobuster"
                        fi

                        # Run gobuster, and also extract ALL results to output file 
                        cmd_to_invoke="~/go/bin/gobuster \
dir -u $dir_path -t 50 -w $custom_wordlist --wildcard --followredirect -o /tmp/out-gobuster-TARGET-PORT-raw.txt; \
cat /tmp/out-gobuster-TARGET-PORT-raw.txt | tr -s '  ' ' ' | cut -d' ' -f1 > /tmp/out-gobuster-TARGET-PORT.txt; \
cat /tmp/out-gobuster-TARGET-PORT.txt | xargs -I [] echo 'PROTOCOL://TARGET:PORT[]' | ~/go/bin/anew $outfile; \
rm /tmp/out-gobuster-TARGET-PORT.txt /tmp/out-gobuster-TARGET-PORT-raw.txt;"
                        echo "$combo" | \
                            $script_dir/invoke_cmd_on_target.sh "$cmd_to_invoke"
                    fi
                fi

                if [ "$method" == "dirsearch" ] || [ "$method" == "all" ]; then

                    if [ "$verbose" == "1" ]; then
                        echo "[*] Enumerate URL dir: $dir_path via dirsearch"
                    fi

                    # Run dirsearch, and also extract the results to the out file
                    cmd_to_invoke="python3 \
/opt/dirsearch/dirsearch.py -x 400,401,403 -F -b -u $dir_path -E \
--ua \"$USER_AGENT\" --plain-text-report /tmp/out-dirsearch-TARGET-PORT-raw.txt; \
cat /tmp/out-dirsearch-TARGET-PORT-raw.txt | tr -s '  ' ' ' | cut -d' ' -f3 > /tmp/out-dirsearch-TARGET-PORT.txt; \
cat /tmp/out-dirsearch-TARGET-PORT.txt | ~/go/bin/anew $outfile; \
rm /tmp/out-dirsearch-TARGET-PORT.txt /tmp/out-dirsearch-TARGET-PORT-raw.txt;"
                    echo "$combo" | \
                        $script_dir/invoke_cmd_on_target.sh "$cmd_to_invoke" "NONE" "1"
                fi

            done

            # Get the list of directory paths to brute-force for next recursion
            # and order lines for most recent path to be available first
            dir_paths=$(cat "$outfile" | ./get_url_parts.sh "url_dir" | sort | \
                uniq | tac)
        done
    fi
done