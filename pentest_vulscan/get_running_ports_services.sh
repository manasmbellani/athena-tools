#!/bin/bash
# 
# Description: 
#     Get running ports and services via nmap SYN/UDP scan. Note that it is best 
# to either run the script as a root user OR run 'sudo whoami' so the sudo creds
# are cached to allow SYN/SYN UDP scan.
# 
# Usage: 
#     "[-] cat ...<targets>... | ./get_running_services.sh \
#         [tcp-ports-to-scan=top20|common|all|22,23,...] \
#         [include-version-scan=0] [run_udp_scan=1]"
#s
# Input:
#      List of targets (hostnames/IPs) to get running services
# 
# Args:
#     ports_to_scan: Ports to scan. can be one of:
#          'common': Top 1000 ports. Default.
#          'top20': Top 20 ports
#          'all': Number of ports to scan
#          'custom_ports_list': Eg 22,23,25,137-139. Same as what Nmap port scan
#              can take.
# 
#     include_version_scan: Include version scan within Nmap. By default, 0 to 
#         make scans run faster.    
# 
#     run_udp_scan: Run the udp Scan or not. By default, only top UDP scan 
# 
# Output:
#     This script will output the results for each target as a CSV table, using 
#     '|' delimiter. The columns of this table are:
#         $target|$port|$protocol|$service|$more_info(if version scan set) e.g. 
#         132.145.92.212|22|tcp|ssh|OpenSSH Server 2.0
# 
# Examples:
#     To get all the open TCP/UDP ports for the target via nmap: 
#         echo -e "132.145.92.212" | ./get_running_ports_services.sh '' '1' '0
#      
#     To get all the open TCP/UDP ports for the target via TCP Version scan but 
#         excluding UDP scans:
#  
#         echo -e "132.145.92.212" | ./get_running_ports_services.sh '' '1' '0'
#
#     To get the running ports and services for all hosts from file \
#         '/tmp/hosts.txt'
#
#       cat /tmp/hosts.txt | ./get_running_ports_services.sh
#

# TCP Top ports list
TOP20_PORTS="22,25,53,110,137,139,143,389,443,445,636,587,1433,1434,3389,7001,\
8080,8443,9080,9443"

# Determine the UDP ports to scan (by default, top 25 only.)
UDP_TOP_PORTS_TO_SCAN="25"

# Delimiter for writing output
DELIM="|"

# Read the targets to scan from input
targets=$(cat -)

tcp_ports_to_scan=${1:-"common"}
include_version_scan=${2:-"0"}
run_udp_scan=${3:-"1"}


# Get the numeric ports to scan
if [ "$tcp_ports_to_scan" == "common" ]; then
    tcp_ports_to_scan_arg="--top-ports=1000"
elif [ "$tcp_ports_to_scan" == "top20" ]; then
    tcp_ports_to_scan_arg="-p $TOP20_PORTS"
elif [ "$tcp_ports_to_scan" == "all" ]; then
    tcp_ports_to_scan_arg="-p-"
else
    tcp_ports_to_scan_arg="-p $tcp_ports_to_scan"
fi

# Get the UDP ports to scan
udp_ports_to_scan_arg="--top-ports=$UDP_TOP_PORTS_TO_SCAN"

# Determine the version scan flag
if [ "$include_version_scan" == "1" ]; then 
    version_scan_arg="-sV"
else
    version_scan_arg=""
fi

#echo "$tcp_ports_to_scan,$include_version_scan,$run_udp_scan"

IFS=$'\n'
for target in $targets; do
    if [ ! -z "$target" ]; then
        # Output tmpfile for storing TCP/UDP Scan results.
        tcp_tmpfile="$(mktemp -u)"
        udp_tmpfile="$(mktemp -u)"
        
        # DEBUG: For printing tmp files where nmap scans are written. Uncomment \
        # for debugging only.
        # 
        # echo "$tcp_tmpfile,$udp_tmpfile"

        # Run the TCP nmap scan on the target
        /bin/bash -c "sudo nmap --open -sS -Pn $version_scan_arg \
\"$tcp_ports_to_scan_arg\" $target > $tcp_tmpfile" 

        if [ "$run_udp_scan" == "1" ]; then
            # Run the UDP nmap scan on the target
            /bin/bash -c "sudo nmap --open -sU -Pn $version_scan_arg \
\"$udp_ports_to_scan_arg\" $target > $udp_tmpfile"
        else
            # No results as Ucan not run.
            echo '' > "$udp_tmpfile"
        fi

        # Parsing results from TCP/UDP scan
        open_ports_results=$(
            (cat "$tcp_tmpfile"; cat "$udp_tmpfile") \
                | egrep -i "/(tcp|udp).*open.*"
        )
        
        # Extract the open port results and write to output for each target
        IFS=$'\n'
        for open_ports_result in $open_ports_results; do
            port=$(echo "$open_ports_result" | egrep -io "^[0-9]+" )
            protocol=$(echo "$open_ports_result" | egrep -io "^[0-9]+/(tcp|udp)" \
                | cut -d"/" -f2)
            service=$(echo "$open_ports_result" \
                | egrep -io "open.*[a-zA-Z0-9_\-]+" \
                | tr -s "  " " " \
                | cut -d" " -f2)
            more_service_info=$(echo "$open_ports_result" \
                | egrep -io "open.*[a-zA-Z0-9_\-]+[\s]+.*" \
                | tr -s "  " " " \
                | cut -d" " -f3-)
            echo -e "$target$DELIM$port$DELIM$protocol$DELIM$service$DELIM$more_service_info"
        done
        
        # Remove the temporary UDP/TCP output files.
        rm "$udp_tmpfile"; rm "$tcp_tmpfile"
    fi
done