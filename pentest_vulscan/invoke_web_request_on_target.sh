#!/bin/bash
#
# Invoke a web request on target/port combination and return urls OR commands
# that match the given filter criteria
# 
# Setting the verbose flag to 1 provides extra debugging and also stores output
# to a temp file on the device.
# 

# Output folder for storing verbose temp files
TEMP_DIR="/tmp/out-invoke-web-request-tmpfiles"

# Delimiter to use
DELIM="|"

# Timeout for curl request
TIMEOUT="4"

# User agent string to use
USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"

if [ $# -lt 1 ]; then
    echo "[-] cat ...<urls>... | $0 run [regex_filter] [verbose=0]"
    exit 1
fi
regex_filter="$2"
verbose=${3:-"0"}

# Review the URLs
lines=$(cat -)

# Get the current script directory 
script_dir=$(dirname $0)

IFS=$'\n'
for line in $lines; do

    if [ ! -z "$line" ]; then
        # URL to assess
        url="$line"

        [ "$verbose" == "1" ] && echo "[*] Running curl for URL: $url"

        # Prepare the curl request
        cmd_to_exec="curl --max-time "$TIMEOUT" --http1.1 -i -s -A \"$USER_AGENT\" \
            -L -H \"X-Forwarded-For: 127.0.0.1\" \"$url\""

        [ "$verbose" == "1" ] && echo "[*] Invoking command: $cmd_to_exec"
        
        # Make the web request
        cmd_out=$(/bin/bash -c "$cmd_to_exec")

        if [ "$verbose" == "1" ]; then
            # Create the output folder for temporary files
            [ ! -d "$TEMP_DIR" ] && mkdir "$TEMP_DIR"

            # Store the output in an output file
            outfile_raw="$(mktemp -u)"
            outfile_basename=$(basename "$outfile_raw")
            outfile=$(echo "$TEMP_DIR/$outfile_basename")
            echo "$cmd_out" > "$outfile"
            echo "[*] Output for curl to url: $url stored in outfile: $outfile"
        fi

        # Put the entire request into a single line
        cmd_out_one_line=$(echo "$cmd_out" | tr -s "\r\n" "$DELIM")

        if [ ! -z "$regex_filter" ]; then
            [ "$verbose" == "1" ] && echo "[*] Checking output against regex: \
$regex_filter"

            # Check if it matches filter - if it does, print the URL out
            resp_matches=$(echo "$cmd_out_one_line" \
                | grep -iE "$regex_filter")

            # If response matching the regex found, then print the URL
            if [ ! -z "$resp_matches" ]; then
                [ "$verbose" == "1" ] && echo "[+] Match found for url: $url \
with regex: $regex_filter"

                # Print the URL as match found
                echo "$url"
            fi
        else
            # Writing output for the given command
            echo "$cmd_out"
        fi
    fi
done
