# !/bin/bash
# 
# This script contains a number of tools to recon domains,IP address, emails for
# an organization in a recursive manner. It stores the output within the
# specified folder.
# 
# Args:
#     domain: Main domain to use. Required.
#     company_keywords: Comma-separated/Pipe-separated Keywords to use to 
#                       discover related domains for org. E.g. for Google, supply
#                       'gmail,google,drive'. Required.
#     recursive: Run tests recursively
#
# Examples:
#     Starting with the main domain of google.com, attempt to recursively search
#     other domains: 
#       ./recon_checks.sh "google.com" "gmail,google,drive"
# 

# User agent string to use for all requests
USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0"

# Shell to use 
SHELL='/bin/bash'

# File download method
FILE_DOWNLOAD_METHOD='curl'

function exec_cmd {
    # Function executes a command provided and prints the output displayed
    # 
    # Args:
    #     cmd_to_exec: Execute command. Required.
    # 
    local cmd_to_exec=${1:-""}
    local shell=${2:-"$SHELL"}

    if [ ! -z "$cmd_to_exec" ]; then
        echo "[*] Executing command: $cmd_to_exec"

        # Execute the command using speccified shell
        $shell -c "$cmd_to_exec"

        # create some blank lines for clarity
        echo; echo
    fi
}

function download_file {
    # Function downloads file from the specified URL to a specific file
    # 
    # Args: 
    #     url: URL from which file is downloaded
    # 
    local url="$1"
    local filename=${2:-""}
    local file_download_method=${3:-"$FILE_DOWNLOAD_METHOD"}

    if [ ! -z "$url" ]; then
        if [ -z "$filename" ]; then
            # Prepare the file to download to
            filename=$(dirname "$0")
        fi

        echo "[*] Downloading from url: $url to file: $filename"
        if [ "$file_download_method" == "curl" ]; then
            # Download the file via curl
            curl -A "$USER_AGENT" -s -k "$url" -o "$filename"
        elif [ "$file_download_method" == "wget" ]; then
            # Download the file
            wget --no-check-certificate -U "$USER_AGENT" "$url" -O "$filename"
        fi
        
        echo; echo
    fi
}

if [ $# -lt 2 ]; then
    echo "[-] $0 <domain> <company_keywords> [recursive=1]"
    exit 1 
fi
domain="$1"
company_keywords="$2"
recursive=${3:-"1"}

echo "[*] Saving the current working directory"
cwd="$(pwd)"

echo "[*] Making new output folder for domain: $domain" 
outfolder="$cwd/out-$domain"
if [ -d "$outfolder" ]; then
    rm -rf "$outfolder"
fi
mkdir "$outfolder"
echo "[+] outfolder: $outfolder"

echo "[*] Getting all nameservers via dig for domain: $domain"
exec_cmd "(dig -t ns $domain \
    | grep -i \"IN.*NS\" | egrep -io \"[0-9a-z\.\-]+$\" \
    | sed -E \"s/\.$//g\" > \"$outfolder/out-nammeservers-dig-$domain.txt\")"

echo "[*] Getting all nameservers via host for domain: $domain"
exec_cmd "(host -t ns \"$domain\" \
    | grep -i \"name server\" \
    | cut -d' ' -f4) > \"$outfolder/out-nameservers-host-$domain.txt\""

echo "[*] Getting all nameservers via whois for domain: $domain"
exec_cmd "(whois \"$domain\" \
    | grep -i 'name server:' \
    | cut -d' ' -f3 \
    | sort | uniq) > \"$outfolder/out-nameservers-whois-$domain.txt\""

echo "[*] Getting all the subdomains via sublist3r for domain: $domain"
exec_cmd "cd /opt/Sublist3r; \
python3 sublist3r.py -d $domain -o \"$outfolder/out-sublister-$domain.txt\""

echo "[*] Attempting zone transfer via domain: $domain via dig"
exec_cmd "cat \"$outfolder/out-nameservers-dig-$domain.txt\" \
    | xargs -I [] dig @[] \"$domain\" -t AXFR \
    | tee \"$outfolder/out-zone-transfer-dig-$domain.txt\""

echo "[*] Attempting zone transfer via domain: $domain via host"
exec_cmd "cat $outfolder/out-nameservers-host-$domain.txt \
    | xargs -I [] host -l $domain [] \
    | tee \"$outfolder/out-zone-transfer-host-$domain.txt\""

echo "[*] Attempting zone transfer via domain: $domain via assetfinder"
exec_cmd "/root/go/bin/assetfinder --subs-only "$domain" \
    | tee \"$outfolder/out-assetfinder-$domain.txt\""

echo "[*] Get subdomains via threatcrowd on domain: $domain"
download_file "https://www.threatcrowd.org/searchApi/v1/api.php?type=domain&query=$domain" "$outfolder/out-threatcrowd-$domain.txt"

echo "[*] Get subdomains via dns_bufferoverrun on domain: $domain"
download_file "dns.bufferover.run/dns?q=.$domain" "$outfolder/out-dns-bufferoverrun-$domain.txt"

echo "[*] Run subbrute to determine subdomains on domain: $domain"
exec_cmd "cd /opt/subbrute; \
python3 subbrute.py -p $domain > \"$outfolder/out-subbrute-$domain.txt\"; \
cd $cwd"

echo "[*] Run fiece on domain: $domain"
exec_cmd "fierce -dns $domain -wide -file $outfolder/out-fierce-$domain.txt"


echo "[*] Run custom wordlist on domain: $domain using gobuster"
cat <<EOF > "$outfolder"/in-my-wordlist-raw.txt
confluence
jira
jenkins
dev
blog
stage
test
www
# Look for lbs which has known to have ability to launch kubernetes shell:
#    https://twitter.com/krizzsk/status/1249341137183072257?s=20
lbs
graphql
graphiql
EOF
exec_cmd "cat $cwd/in-my-wordlist-raw.txt | grep -vEi '^[ ]*#' > $outfolder/in-my-wordlist.txt; \
~/go/bin/gobuster dns -d $domain -w $outfolder/in-my-wordlist.txt -o $outfolder/out-gobuster-$domain.txt"

echo "[*] Run KnockPy to discover interesting subdomains for domain: $domain"
exec_cmd "cd /opt/knock/knockpy; rm *.csv 2>/dev/null;  \
python knockpy.py -w wordlist/wordlist.txt '$domain' -c; \
ls *.csv | head -n1 | xargs -I [] mv '[]' '$outfolder'/out-knockpy-$domain.csv"

echo "[*] Run subfinder to discover interesting subdomains for domain: $domain"
exec_cmd "subfinder -d $domain > $outfolder/out-subfinder-$domain.txt"

echo "[*] Run recon-ng 'hackertarget' on domain: $domain"
cat <<EOF > "$outfolder/in-recon-ng-$domain.txt"
marketplace install recon/domains-hosts/hackertarget
modules load recon/domains-hosts/hackertarget
options set SOURCE $domain
run
exit
EOF
exec_cmd "cd /opt/recon-ng; \
cat '$outfolder/in-recon-ng-$domain.txt' | ./recon-ng | \
tee $outfolder/out-recon-ng-$domain.txt"

echo "[*] Run amass on domain: $domain to get subdomains"
exec_cmd "amass enum -ip -brute -min-for-recursive 3 -d $domain \
-o '$outfolder/out-amass-$domain.txt'"

echo "[*] Get the sorted combined wordlist on domain: $domain"
exec_cmd "~/go/bin/gobuster dns -d $domain \
-w /opt/sortedcombined-knock-dnsrecon-fierce-reconng/sortedcombined-knock-dnsrecon-fierce-reconng.txt \
-o '$outfolder/out-gobuster-sortedcombined-$domain.txt'"

echo "[*] Use gobuster to use EnormousDNS recon on domain: $domain"
exec_cmd "~/go/bin/gobuster dns -d $domain \
-w /opt/HugeDNS/EnormousDNS.txt \
-o '$outfolder/out-gobuster-enormousdns-$domain.txt'"

